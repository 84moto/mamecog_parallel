//
// SampleMNIST.cs
// Copyright 2021 Hideki Hashimoto
//
// https://github.com/84moto/mamecog_parallel
//
// This software is released under the MIT License.
//

// 下記のKeras公式ページのMNIST文字認識CNNの学習済みモデルを
// まめコグC#ライブラリを用いて実行するサンプル
//
// Keras公式ページのMNIST文字認識CNNサンプル
// https://keras.io/examples/vision/mnist_convnet/
//
// Model: "sequential"
// _________________________________________________________________
// Layer (type)                 Output Shape              Param #   
// =================================================================
// conv2d (Conv2D)              (None, 26, 26, 32)        320       
// _________________________________________________________________
// max_pooling2d (MaxPooling2D) (None, 13, 13, 32)        0         
// _________________________________________________________________
// conv2d_1 (Conv2D)            (None, 11, 11, 64)        18496     
// _________________________________________________________________
// max_pooling2d_1 (MaxPooling2 (None, 5, 5, 64)          0         
// _________________________________________________________________
// flatten (Flatten)            (None, 1600)              0         
// _________________________________________________________________
// dropout (Dropout)            (None, 1600)              0         
// _________________________________________________________________
// dense (Dense)                (None, 10)                16010     
// =================================================================
// Total params: 34,826
// Trainable params: 34,826
// Non-trainable params: 0
// _________________________________________________________________
// 
// このC#サンプルプログラムは
// 事前にmamecog_converter.pyを用いて作成した
// 下記のバイナリファイルを読み込んで動作する
//   conv2d_b.bin    conv2d_k.bin
//   conv2d_1_b.bin  conv2d_1_k.bin
//   dense_b.bin     dense_k.bin

using System;

namespace Mamecog
{
    class SampleMNIST
    {
        static float[] testInput = {
            0.0000F, 0.0000F, 0.0000F, 0.0000F, 0.0000F, 0.0000F, 0.0000F, 0.0000F, 0.0000F, 0.0000F, 0.0000F, 0.0000F, 0.0000F, 0.0000F, 0.0000F, 0.0000F, 0.0000F, 0.0000F, 0.0000F, 0.0000F, 0.0000F, 0.0000F, 0.0000F, 0.0000F, 0.0000F, 0.0000F, 0.0000F, 0.0000F,
            0.0000F, 0.0000F, 0.0000F, 0.0000F, 0.0000F, 0.0000F, 0.0000F, 0.0000F, 0.0000F, 0.0000F, 0.0000F, 0.0000F, 0.0000F, 0.0000F, 0.0000F, 0.0000F, 0.0000F, 0.0000F, 0.0000F, 0.0000F, 0.0000F, 0.0000F, 0.0000F, 0.0000F, 0.0000F, 0.0000F, 0.0000F, 0.0000F,
            0.0000F, 0.0000F, 0.0000F, 0.0000F, 0.0000F, 0.0000F, 0.0000F, 0.0000F, 0.0000F, 0.0000F, 0.0000F, 0.0000F, 0.0000F, 0.0000F, 0.0000F, 0.0000F, 0.0000F, 0.0000F, 0.0000F, 0.0000F, 0.0000F, 0.0000F, 0.0000F, 0.0000F, 0.0000F, 0.0000F, 0.0000F, 0.0000F,
            0.0000F, 0.0000F, 0.0000F, 0.0000F, 0.0000F, 0.0000F, 0.0000F, 0.0000F, 0.0000F, 0.0000F, 0.0000F, 0.0000F, 0.0000F, 0.0000F, 0.0000F, 0.0000F, 0.0000F, 0.0000F, 0.0000F, 0.0000F, 0.0000F, 0.0000F, 0.0000F, 0.0000F, 0.0000F, 0.0000F, 0.0000F, 0.0000F,
            0.0000F, 0.0000F, 0.0000F, 0.0000F, 0.0000F, 0.0000F, 0.0000F, 0.0000F, 0.0000F, 0.0000F, 0.0000F, 0.0000F, 0.0000F, 0.0000F, 0.0000F, 0.0000F, 0.0000F, 0.0000F, 0.0000F, 0.0000F, 0.0000F, 0.0000F, 0.0000F, 0.0000F, 0.0000F, 0.0000F, 0.0000F, 0.0000F,
            0.0000F, 0.0000F, 0.0000F, 0.0000F, 0.0000F, 0.0000F, 0.0000F, 0.0000F, 0.0000F, 0.0000F, 0.0000F, 0.0000F, 0.0000F, 0.0000F, 0.0000F, 0.0000F, 0.0000F, 0.0000F, 0.0000F, 0.0000F, 0.0000F, 0.0000F, 0.0000F, 0.0000F, 0.0000F, 0.0000F, 0.0000F, 0.0000F,
            0.0000F, 0.0000F, 0.0000F, 0.0000F, 0.0000F, 0.0000F, 0.0000F, 0.0000F, 0.0000F, 0.0000F, 0.0000F, 0.0000F, 0.0000F, 0.0000F, 0.0000F, 0.0000F, 0.0000F, 0.0000F, 0.0000F, 0.0000F, 0.0000F, 0.0000F, 0.0000F, 0.0000F, 0.0000F, 0.0000F, 0.0000F, 0.0000F,
            0.0000F, 0.0000F, 0.0000F, 0.0000F, 0.0000F, 0.0000F, 0.3294F, 0.7255F, 0.6235F, 0.5922F, 0.2353F, 0.1412F, 0.0000F, 0.0000F, 0.0000F, 0.0000F, 0.0000F, 0.0000F, 0.0000F, 0.0000F, 0.0000F, 0.0000F, 0.0000F, 0.0000F, 0.0000F, 0.0000F, 0.0000F, 0.0000F,
            0.0000F, 0.0000F, 0.0000F, 0.0000F, 0.0000F, 0.0000F, 0.8706F, 0.9961F, 0.9961F, 0.9961F, 0.9961F, 0.9451F, 0.7765F, 0.7765F, 0.7765F, 0.7765F, 0.7765F, 0.7765F, 0.7765F, 0.7765F, 0.6667F, 0.2039F, 0.0000F, 0.0000F, 0.0000F, 0.0000F, 0.0000F, 0.0000F,
            0.0000F, 0.0000F, 0.0000F, 0.0000F, 0.0000F, 0.0000F, 0.2627F, 0.4471F, 0.2824F, 0.4471F, 0.6392F, 0.8902F, 0.9961F, 0.8824F, 0.9961F, 0.9961F, 0.9961F, 0.9804F, 0.8980F, 0.9961F, 0.9961F, 0.5490F, 0.0000F, 0.0000F, 0.0000F, 0.0000F, 0.0000F, 0.0000F,
            0.0000F, 0.0000F, 0.0000F, 0.0000F, 0.0000F, 0.0000F, 0.0000F, 0.0000F, 0.0000F, 0.0000F, 0.0000F, 0.0667F, 0.2588F, 0.0549F, 0.2627F, 0.2627F, 0.2627F, 0.2314F, 0.0824F, 0.9255F, 0.9961F, 0.4157F, 0.0000F, 0.0000F, 0.0000F, 0.0000F, 0.0000F, 0.0000F,
            0.0000F, 0.0000F, 0.0000F, 0.0000F, 0.0000F, 0.0000F, 0.0000F, 0.0000F, 0.0000F, 0.0000F, 0.0000F, 0.0000F, 0.0000F, 0.0000F, 0.0000F, 0.0000F, 0.0000F, 0.0000F, 0.3255F, 0.9922F, 0.8196F, 0.0706F, 0.0000F, 0.0000F, 0.0000F, 0.0000F, 0.0000F, 0.0000F,
            0.0000F, 0.0000F, 0.0000F, 0.0000F, 0.0000F, 0.0000F, 0.0000F, 0.0000F, 0.0000F, 0.0000F, 0.0000F, 0.0000F, 0.0000F, 0.0000F, 0.0000F, 0.0000F, 0.0000F, 0.0863F, 0.9137F, 1.0000F, 0.3255F, 0.0000F, 0.0000F, 0.0000F, 0.0000F, 0.0000F, 0.0000F, 0.0000F,
            0.0000F, 0.0000F, 0.0000F, 0.0000F, 0.0000F, 0.0000F, 0.0000F, 0.0000F, 0.0000F, 0.0000F, 0.0000F, 0.0000F, 0.0000F, 0.0000F, 0.0000F, 0.0000F, 0.0000F, 0.5059F, 0.9961F, 0.9333F, 0.1725F, 0.0000F, 0.0000F, 0.0000F, 0.0000F, 0.0000F, 0.0000F, 0.0000F,
            0.0000F, 0.0000F, 0.0000F, 0.0000F, 0.0000F, 0.0000F, 0.0000F, 0.0000F, 0.0000F, 0.0000F, 0.0000F, 0.0000F, 0.0000F, 0.0000F, 0.0000F, 0.0000F, 0.2314F, 0.9765F, 0.9961F, 0.2431F, 0.0000F, 0.0000F, 0.0000F, 0.0000F, 0.0000F, 0.0000F, 0.0000F, 0.0000F,
            0.0000F, 0.0000F, 0.0000F, 0.0000F, 0.0000F, 0.0000F, 0.0000F, 0.0000F, 0.0000F, 0.0000F, 0.0000F, 0.0000F, 0.0000F, 0.0000F, 0.0000F, 0.0000F, 0.5216F, 0.9961F, 0.7333F, 0.0196F, 0.0000F, 0.0000F, 0.0000F, 0.0000F, 0.0000F, 0.0000F, 0.0000F, 0.0000F,
            0.0000F, 0.0000F, 0.0000F, 0.0000F, 0.0000F, 0.0000F, 0.0000F, 0.0000F, 0.0000F, 0.0000F, 0.0000F, 0.0000F, 0.0000F, 0.0000F, 0.0000F, 0.0353F, 0.8039F, 0.9725F, 0.2275F, 0.0000F, 0.0000F, 0.0000F, 0.0000F, 0.0000F, 0.0000F, 0.0000F, 0.0000F, 0.0000F,
            0.0000F, 0.0000F, 0.0000F, 0.0000F, 0.0000F, 0.0000F, 0.0000F, 0.0000F, 0.0000F, 0.0000F, 0.0000F, 0.0000F, 0.0000F, 0.0000F, 0.0000F, 0.4941F, 0.9961F, 0.7137F, 0.0000F, 0.0000F, 0.0000F, 0.0000F, 0.0000F, 0.0000F, 0.0000F, 0.0000F, 0.0000F, 0.0000F,
            0.0000F, 0.0000F, 0.0000F, 0.0000F, 0.0000F, 0.0000F, 0.0000F, 0.0000F, 0.0000F, 0.0000F, 0.0000F, 0.0000F, 0.0000F, 0.0000F, 0.2941F, 0.9843F, 0.9412F, 0.2235F, 0.0000F, 0.0000F, 0.0000F, 0.0000F, 0.0000F, 0.0000F, 0.0000F, 0.0000F, 0.0000F, 0.0000F,
            0.0000F, 0.0000F, 0.0000F, 0.0000F, 0.0000F, 0.0000F, 0.0000F, 0.0000F, 0.0000F, 0.0000F, 0.0000F, 0.0000F, 0.0000F, 0.0745F, 0.8667F, 0.9961F, 0.6510F, 0.0000F, 0.0000F, 0.0000F, 0.0000F, 0.0000F, 0.0000F, 0.0000F, 0.0000F, 0.0000F, 0.0000F, 0.0000F,
            0.0000F, 0.0000F, 0.0000F, 0.0000F, 0.0000F, 0.0000F, 0.0000F, 0.0000F, 0.0000F, 0.0000F, 0.0000F, 0.0000F, 0.0118F, 0.7961F, 0.9961F, 0.8588F, 0.1373F, 0.0000F, 0.0000F, 0.0000F, 0.0000F, 0.0000F, 0.0000F, 0.0000F, 0.0000F, 0.0000F, 0.0000F, 0.0000F,
            0.0000F, 0.0000F, 0.0000F, 0.0000F, 0.0000F, 0.0000F, 0.0000F, 0.0000F, 0.0000F, 0.0000F, 0.0000F, 0.0000F, 0.1490F, 0.9961F, 0.9961F, 0.3020F, 0.0000F, 0.0000F, 0.0000F, 0.0000F, 0.0000F, 0.0000F, 0.0000F, 0.0000F, 0.0000F, 0.0000F, 0.0000F, 0.0000F,
            0.0000F, 0.0000F, 0.0000F, 0.0000F, 0.0000F, 0.0000F, 0.0000F, 0.0000F, 0.0000F, 0.0000F, 0.0000F, 0.1216F, 0.8784F, 0.9961F, 0.4510F, 0.0039F, 0.0000F, 0.0000F, 0.0000F, 0.0000F, 0.0000F, 0.0000F, 0.0000F, 0.0000F, 0.0000F, 0.0000F, 0.0000F, 0.0000F,
            0.0000F, 0.0000F, 0.0000F, 0.0000F, 0.0000F, 0.0000F, 0.0000F, 0.0000F, 0.0000F, 0.0000F, 0.0000F, 0.5216F, 0.9961F, 0.9961F, 0.2039F, 0.0000F, 0.0000F, 0.0000F, 0.0000F, 0.0000F, 0.0000F, 0.0000F, 0.0000F, 0.0000F, 0.0000F, 0.0000F, 0.0000F, 0.0000F,
            0.0000F, 0.0000F, 0.0000F, 0.0000F, 0.0000F, 0.0000F, 0.0000F, 0.0000F, 0.0000F, 0.0000F, 0.2392F, 0.9490F, 0.9961F, 0.9961F, 0.2039F, 0.0000F, 0.0000F, 0.0000F, 0.0000F, 0.0000F, 0.0000F, 0.0000F, 0.0000F, 0.0000F, 0.0000F, 0.0000F, 0.0000F, 0.0000F,
            0.0000F, 0.0000F, 0.0000F, 0.0000F, 0.0000F, 0.0000F, 0.0000F, 0.0000F, 0.0000F, 0.0000F, 0.4745F, 0.9961F, 0.9961F, 0.8588F, 0.1569F, 0.0000F, 0.0000F, 0.0000F, 0.0000F, 0.0000F, 0.0000F, 0.0000F, 0.0000F, 0.0000F, 0.0000F, 0.0000F, 0.0000F, 0.0000F,
            0.0000F, 0.0000F, 0.0000F, 0.0000F, 0.0000F, 0.0000F, 0.0000F, 0.0000F, 0.0000F, 0.0000F, 0.4745F, 0.9961F, 0.8118F, 0.0706F, 0.0000F, 0.0000F, 0.0000F, 0.0000F, 0.0000F, 0.0000F, 0.0000F, 0.0000F, 0.0000F, 0.0000F, 0.0000F, 0.0000F, 0.0000F, 0.0000F,
            0.0000F, 0.0000F, 0.0000F, 0.0000F, 0.0000F, 0.0000F, 0.0000F, 0.0000F, 0.0000F, 0.0000F, 0.0000F, 0.0000F, 0.0000F, 0.0000F, 0.0000F, 0.0000F, 0.0000F, 0.0000F, 0.0000F, 0.0000F, 0.0000F, 0.0000F, 0.0000F, 0.0000F, 0.0000F, 0.0000F, 0.0000F, 0.0000F};

        static void Main(string[] args)
        {
            Console.WriteLine("<<<Mamecog sample>>>");

            // Conv2DとDenseのインスタンスを生成する
            Conv2D conv1 = new Conv2D(32, 1, 3, 3);
            Conv2D conv2 = new Conv2D(64, 32, 3, 3);
            Dense dense = new Dense(10, 1600);

            // Conv2DとDenseのカーネルとバイアスをファイルから読み込む
            conv1.LoadKernelAndBias("conv2d_k.bin", "conv2d_b.bin");
            conv2.LoadKernelAndBias("conv2d_1_k.bin", "conv2d_1_b.bin");
            dense.LoadKernelAndBias("dense_k.bin", "dense_b.bin");

            // 各層の入出力の格納先を用意する
            LayerData2D input0 = new LayerData2D(1, 28, 28);
            LayerData2D conv1output = new LayerData2D(32, 26, 26);
            LayerData2D pool1output = new LayerData2D(32, 13, 13);
            LayerData2D conv2output = new LayerData2D(64, 11, 11);
            LayerData2D pool2output = new LayerData2D(64, 5, 5);
            float[] pool2flatten = new float[64 * 5 * 5];
            float[] denseOutput = new float[10];

            // テスト用の入力データを用意する
            Console.WriteLine("<<<Input>>>");
            input0.Cells = testInput;
            input0.PrintCellValues();

            // 各層の出力を順に計算する
            conv1.Conv(conv1output, input0, false);
            conv1.ReLU(conv1output);
            MaxPool2D.Calc(pool1output, conv1output, 2);
            conv2.Conv(conv2output, pool1output, false);
            conv2.ReLU(conv2output);
            MaxPool2D.Calc(pool2output, conv2output, 2);
            pool2output.Flatten(pool2flatten);
            dense.Calc(denseOutput, pool2flatten);
            dense.Softmax(denseOutput);

            // Dense層の出力を表示する
            Console.WriteLine("<<<Output>>>");
            for(int i = 0; i < denseOutput.Length; i++)
            {
                Console.WriteLine("Dense[" + i.ToString() + "] = " + denseOutput[i].ToString("F4"));
            }
        }
    }
}
